// <auto-generated />
using System;
using Horizontal.Domain.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Horizontal.Migrations
{
    [DbContext(typeof(HorizontalDbContext))]
    [Migration("20230922135519_Add index on custom url query")]
    partial class Addindexoncustomurlquery
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ArticleTag", b =>
                {
                    b.Property<int>("ArticlesId")
                        .HasColumnType("int");

                    b.Property<int>("TagsId")
                        .HasColumnType("int");

                    b.HasKey("ArticlesId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("ArticleTag");
                });

            modelBuilder.Entity("Horizontal.Domain.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("LongTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("PreviewPhotoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextBeginning")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("Horizontal.Domain.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Horizontal.Domain.CustomUrlMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CustomUrl")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OriginalUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomUrl")
                        .IsUnique()
                        .HasFilter("[CustomUrl] IS NOT NULL");

                    b.ToTable("CustomUrls");
                });

            modelBuilder.Entity("Horizontal.Domain.CustomUrlQueryValues", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CustomUrl")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CustomUrlMappingId")
                        .HasColumnType("int");

                    b.Property<int>("ParameterOrder")
                        .HasColumnType("int");

                    b.Property<string>("QueryKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QueryValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomUrl")
                        .IsUnique()
                        .HasFilter("[CustomUrl] IS NOT NULL");

                    b.HasIndex("CustomUrlMappingId");

                    b.ToTable("CustomUrlQueryValues");
                });

            modelBuilder.Entity("Horizontal.Domain.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsInTopNavbar")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TopNavbarOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("ArticleTag", b =>
                {
                    b.HasOne("Horizontal.Domain.Article", null)
                        .WithMany()
                        .HasForeignKey("ArticlesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Horizontal.Domain.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Horizontal.Domain.Article", b =>
                {
                    b.HasOne("Horizontal.Domain.Category", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Horizontal.Domain.Category", b =>
                {
                    b.HasOne("Horizontal.Domain.Category", "ParentCategory")
                        .WithMany("ChildCategories")
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("Horizontal.Domain.CustomUrlQueryValues", b =>
                {
                    b.HasOne("Horizontal.Domain.CustomUrlMapping", "CustomUrlMapping")
                        .WithMany("CustomUrlQueryValues")
                        .HasForeignKey("CustomUrlMappingId");

                    b.Navigation("CustomUrlMapping");
                });

            modelBuilder.Entity("Horizontal.Domain.Category", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("ChildCategories");
                });

            modelBuilder.Entity("Horizontal.Domain.CustomUrlMapping", b =>
                {
                    b.Navigation("CustomUrlQueryValues");
                });
#pragma warning restore 612, 618
        }
    }
}
